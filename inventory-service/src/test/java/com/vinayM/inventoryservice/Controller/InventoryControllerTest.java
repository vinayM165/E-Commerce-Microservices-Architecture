    package com.vinayM.inventoryservice.Controller;
    // Generated by CodiumAI


    import com.vinayM.inventoryservice.DTO.InventoryRequest;
    import com.vinayM.inventoryservice.Exception.InventoryNotFoundException;
    import com.vinayM.inventoryservice.Service.InventoryService;
    import com.vinayM.inventoryservice.Model.Inventory;
    import org.junit.jupiter.api.Test;
    import org.mockito.Mockito;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
    import org.springframework.boot.test.context.SpringBootTest;
    import org.springframework.boot.test.mock.mockito.MockBean;
    import org.springframework.http.MediaType;
    import org.springframework.http.ResponseEntity;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;


    import static java.nio.file.Paths.get;
    import static net.bytebuddy.matcher.ElementMatchers.is;
    import static org.hamcrest.Matchers.hasSize;
    import static org.mockito.Mockito.*;
    import static org.springframework.test.web.client.match.MockRestRequestMatchers.jsonPath;
    import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

    import org.springframework.test.web.servlet.MockMvc;
    import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
    import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

    @SpringBootTest
    @AutoConfigureMockMvc
    public class InventoryControllerTest {

        @Autowired
        MockMvc mockMvc;

        @MockBean
        InventoryService service;

        @Test
        public void testGetInventoryBySkuCode() throws Exception {
            List<String> s = Arrays.asList("SkuCode1", "SkuCode2");
            Inventory i = Inventory.builder()
                    .id("1L")
                    .skuCode("SkuCode1")
                    .quantity(1).build();
            Mockito.when(service.getProductBySkuCode("SkuCode1")).thenReturn(ResponseEntity.ok(i));

            mockMvc.perform(MockMvcRequestBuilders.get("/api/inventory/SkuCode1"))
                    .andExpect(status().isOk())
                    .andExpect(MockMvcResultMatchers.jsonPath("$.id").value("1L"))
                    .andExpect(MockMvcResultMatchers.jsonPath("$.skuCode").value("SkuCode1"));
        }

        @Test
        public void testGetAllInventory() throws Exception {
            List<Inventory> arr = new ArrayList<>();
            arr.add(Inventory.builder()
                    .id("1L")
                    .skuCode("SkuCode1")
                    .quantity(1).build());
            arr.add(Inventory.builder()
                    .id("2L")
                    .skuCode("SkuCode2")
                    .quantity(1).build());

            when(service.getAllInventory()).thenReturn(ResponseEntity.ok(arr));

            mockMvc.perform(MockMvcRequestBuilders.get("/api/inventory"))
                    .andExpect(status().isOk())
                    .andExpect(MockMvcResultMatchers.jsonPath("$[0].id").value("1L"))
                    .andExpect(MockMvcResultMatchers.jsonPath("$[0].skuCode").value("SkuCode1"))
                    .andExpect(MockMvcResultMatchers.jsonPath("$[1].id").value("2L"))
                    .andExpect(MockMvcResultMatchers.jsonPath("$[1].skuCode").value("SkuCode2"));

        }


        // Should return a list of inventories for a given list of sku codes
        @Test
        public void test_getProductBySkuCodes() throws Exception {
            List<String> skuCodes = Arrays.asList("SkuCode1", "SkuCode2");
            List<Inventory> inventories = Arrays.asList(
                    Inventory.builder().id("1L").skuCode("SkuCode1").quantity(1).build(),
                    Inventory.builder().id("2L").skuCode("SkuCode2").quantity(2).build()
            );
            Mockito.when(service.getProductBySkuCodes(skuCodes)).thenReturn(ResponseEntity.ok(inventories));

            mockMvc.perform(MockMvcRequestBuilders.post("/api/inventory/getList")
                            .contentType(MediaType.APPLICATION_JSON)
                            .content("[\"SkuCode1\", \"SkuCode2\"]"))
                    .andExpect(status().isOk())
                    .andExpect(MockMvcResultMatchers.jsonPath("$[0].id").value("1L"))
                    .andExpect(MockMvcResultMatchers.jsonPath("$[0].skuCode").value("SkuCode1"))
                    .andExpect(MockMvcResultMatchers.jsonPath("$[0].quantity").value(1))
                    .andExpect(MockMvcResultMatchers.jsonPath("$[1].id").value("2L"))
                    .andExpect(MockMvcResultMatchers.jsonPath("$[1].skuCode").value("SkuCode2"))
                    .andExpect(MockMvcResultMatchers.jsonPath("$[1].quantity").value(2));
        }

        // Should return a single inventory for a given sku code
        @Test
        public void test_getProductBySkuCode() throws Exception {
            Inventory inventory = Inventory.builder().id("1L").skuCode("SkuCode1").quantity(1).build();
            Mockito.when(service.getProductBySkuCode("SkuCode1")).thenReturn(ResponseEntity.ok(inventory));

            mockMvc.perform(MockMvcRequestBuilders.get("/api/inventory/SkuCode1"))
                    .andExpect(status().isOk())
                    .andExpect(MockMvcResultMatchers.jsonPath("$.id").value("1L"))
                    .andExpect(MockMvcResultMatchers.jsonPath("$.skuCode").value("SkuCode1"))
                    .andExpect(MockMvcResultMatchers.jsonPath("$.quantity").value(1));
        }

        // Should return a list of all inventories
        @Test
        public void test_getAllInventory() throws Exception {
            List<Inventory> inventories = Arrays.asList(
                    Inventory.builder().id("1L").skuCode("SkuCode1").quantity(1).build(),
                    Inventory.builder().id("2L").skuCode("SkuCode2").quantity(2).build()
            );
            Mockito.when(service.getAllInventory()).thenReturn(ResponseEntity.ok(inventories));

            mockMvc.perform(MockMvcRequestBuilders.get("/api/inventory"))
                    .andExpect(status().isOk())
                    .andExpect(MockMvcResultMatchers.jsonPath("$[0].id").value("1L"))
                    .andExpect(MockMvcResultMatchers.jsonPath("$[0].skuCode").value("SkuCode1"))
                    .andExpect(MockMvcResultMatchers.jsonPath("$[0].quantity").value(1))
                    .andExpect(MockMvcResultMatchers.jsonPath("$[1].id").value("2L"))
                    .andExpect(MockMvcResultMatchers.jsonPath("$[1].skuCode").value("SkuCode2"))
                    .andExpect(MockMvcResultMatchers.jsonPath("$[1].quantity").value(2));
        }

        // Should return bad request when sku codes are not found
        @Test
        public void test_getProductBySkuCodes_notFound() throws Exception {
            List<String> skuCodes = Arrays.asList("SkuCode1", "SkuCode2");
            Mockito.when(service.getProductBySkuCodes(skuCodes)).thenReturn(ResponseEntity.badRequest().build());

            mockMvc.perform(MockMvcRequestBuilders.post("/api/inventory/getList")
                            .contentType(MediaType.APPLICATION_JSON)
                            .content("[\"SkuCode1\", \"SkuCode2\"]"))
                    .andExpect(status().isBadRequest());
        }

        // Should return bad request when sku code is not found
        @Test
        public void test_getProductBySkuCode_notFound() throws Exception {
            Mockito.when(service.getProductBySkuCode("SkuCode1")).thenReturn(ResponseEntity.badRequest().build());

            mockMvc.perform(MockMvcRequestBuilders.get("/api/inventory/SkuCode1"))
                    .andExpect(status().isBadRequest());
        }

        // Should throw InventoryNotFoundException when inventory for a given id is not found
//        @Test
//        public void test_updateProdQuantity_notFound() throws Exception {
//            String id = "1L";
//            InventoryRequest request = InventoryRequest.builder().id("1L").skuCode("SkuCode1").quantity(1).build();
//            Mockito.when(service.updateProdQuantity(id, request)).thenThrow(new InventoryNotFoundException("Inventory for this id is not found in record."));
//
//            mockMvc.perform(MockMvcRequestBuilders.put("/api/inventory/1L")
//                            .contentType(MediaType.APPLICATION_JSON)
//                            .content("{\"id\":\"1L\",\"skuCode\":\"SkuCode1\",\"quantity\":1}"))
//                    .andExpect(status().isNotFound());
//        }
    }

