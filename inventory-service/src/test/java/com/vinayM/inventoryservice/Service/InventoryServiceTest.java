package com.vinayM.inventoryservice.Service;
// Generated by CodiumAI

import com.vinayM.inventoryservice.DTO.InventoryRequest;
import com.vinayM.inventoryservice.Exception.InventoryNotFoundException;
import com.vinayM.inventoryservice.Model.Inventory;
import com.vinayM.inventoryservice.Repository.InventoryRepo;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@SpringBootTest
@RunWith(MockitoJUnitRunner.class) // For JUnit 4
public class InventoryServiceTest {
    @Mock
    InventoryRepo repo;

    @InjectMocks
    InventoryService inventoryService;

    // Successfully update product quantity
    @Test
    public void test_update_product_quantity() throws InventoryNotFoundException {
        // Given
        String id = "123";
        InventoryRequest request = new InventoryRequest("123", "SKU123", 10);
        Inventory inventory = new Inventory("123", "SKU123", 10);
        when(repo.findById(id)).thenReturn(Optional.of(inventory));

        // When
        ResponseEntity<String> response = inventoryService.updateProdQuantity(id, request);

        // Then
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals("Product quantity has been added successfully!!!", response.getBody());
        verify(repo, times(1)).findById(id);
        verify(repo, times(1)).save(inventory);
    }

    // Successfully get products by sku codes
    @Test
    public void test_get_products_by_sku_codes() {
        // Given
        List<String> skuCodes = Arrays.asList("SKU123", "SKU456");
        List<Inventory> inventories = Arrays.asList(
                new Inventory("123", "SKU123", 10),
                new Inventory("456", "SKU456", 5)
        );
        when(repo.findByskuCodeIn(skuCodes)).thenReturn(inventories);

        // When
        ResponseEntity<List<Inventory>> response = inventoryService.getProductBySkuCodes(skuCodes);

        // Then
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(inventories, response.getBody());
        verify(repo, times(1)).findByskuCodeIn(skuCodes);
    }

    // Successfully get all inventory
    @Test
    public void test_get_all_inventory() {
        // Given
        List<Inventory> inventories = Arrays.asList(
                new Inventory("123", "SKU123", 10),
                new Inventory("456", "SKU456", 5)
        );
        when(repo.findAll()).thenReturn(inventories);

        // When
        ResponseEntity<List<Inventory>> response = inventoryService.getAllInventory();

        // Then
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(inventories, response.getBody());
        verify(repo, times(1)).findAll();
    }

    // Successfully get product by sku code
    @Test
    public void test_get_product_by_sku_code() {
        // Given
        String skuCode = "SKU123";
        Inventory inventory = new Inventory("123", "SKU123", 10);
        when(repo.findByskuCode(skuCode)).thenReturn(inventory);

        // When
        ResponseEntity<Inventory> response = inventoryService.getProductBySkuCode(skuCode);

        // Then
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(inventory, response.getBody());
        verify(repo, times(1)).findByskuCode(skuCode);
    }

    // Inventory not found for given id
    @Test
    public void test_inventory_not_found_for_given_id() {
        // Given
        String id = "123";
        when(repo.findById(id)).thenReturn(Optional.empty());

        // When
        try {
            inventoryService.updateProdQuantity(id, new InventoryRequest("123", "SKU123", 10));
            fail("Expected InventoryNotFoundException to be thrown");
        } catch (InventoryNotFoundException e) {
            // Then
            assertEquals("Inventory for this id is not found in record.", e.getMessage());
            verify(repo, times(1)).findById(id);
            verify(repo, never()).save(any(Inventory.class));
        }
    }

    // Exception while getting products by sku codes
    @Test
    public void test_exception_while_getting_products_by_sku_codes() {
        // Given
        List<String> skuCodes = Arrays.asList("SKU123", "SKU456");
        when(repo.findByskuCodeIn(skuCodes)).thenThrow(new RuntimeException("Error retrieving products"));

        // When
        ResponseEntity<List<Inventory>> response = inventoryService.getProductBySkuCodes(skuCodes);

        // Then
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertNull(response.getBody());
        verify(repo, times(1)).findByskuCodeIn(skuCodes);
    }

    // Exception while getting product by sku code
    @Test
    public void test_exception_while_getting_product_by_sku_code() {
        // Given
        String skuCode = "SKU123";
        when(repo.findByskuCode(skuCode)).thenThrow(new RuntimeException("Error retrieving product"));

        // When
        ResponseEntity<Inventory> response = inventoryService.getProductBySkuCode(skuCode);

        // Then
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertNull(response.getBody());
        verify(repo, times(1)).findByskuCode(skuCode);
    }

    // Test for null input in updateProdQuantity method
    @Test
    public void test_null_input_in_updateProdQuantity_method() {
        // Given
        String id = "123";
        when(repo.findById(id)).thenReturn(Optional.empty());

        // When
        try {
            inventoryService.updateProdQuantity(id, null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException | InventoryNotFoundException e) {
            // Then
            assertEquals("request is marked non-null but is null", e.getMessage());
            verify(repo, times(1)).findById(id);
            verify(repo, never()).save(any(Inventory.class));
        }
    }

}