    package com.vinayM.inventoryservice.Controller;
    // Generated by CodiumAI


    import com.fasterxml.jackson.databind.ObjectMapper;
    import com.netflix.discovery.shared.Application;
    import com.vinayM.inventoryservice.DTO.InventoryRequest;
    import com.vinayM.inventoryservice.Exception.InventoryNotFoundException;
    import com.vinayM.inventoryservice.Service.InventoryService;
    import com.vinayM.inventoryservice.Model.Inventory;
    import jdk.jfr.ContentType;
    import org.junit.Test;
    import org.junit.platform.engine.TestExecutionResult;
    import org.junit.runner.RunWith;
    import org.mockito.Mock;
    import org.mockito.Mockito;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.boot.ApplicationArguments;
    import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
    import org.springframework.boot.test.context.SpringBootTest;
    import org.springframework.boot.test.mock.mockito.MockBean;
    import org.springframework.http.MediaType;
    import org.springframework.http.ResponseEntity;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;


    import static java.nio.file.Paths.get;
    import static net.bytebuddy.matcher.ElementMatchers.is;
    import static org.hamcrest.Matchers.containsString;
    import static org.hamcrest.Matchers.hasSize;
    import static org.mockito.Mockito.*;
    import static org.springframework.http.RequestEntity.post;
    import static org.springframework.test.web.client.match.MockRestRequestMatchers.content;
    import static org.springframework.test.web.client.match.MockRestRequestMatchers.jsonPath;
    import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
    import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

    import org.springframework.test.context.junit4.SpringRunner;
    import org.springframework.test.web.servlet.MockMvc;
    import org.springframework.test.web.servlet.RequestBuilder;
    import org.springframework.test.web.servlet.ResultMatcher;
    import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
    import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

    import javax.annotation.meta.When;
    import javax.swing.text.AbstractDocument;

    @SpringBootTest
    @AutoConfigureMockMvc
    @RunWith(SpringRunner.class)
    public class InventoryControllerTest {

        @Autowired
        MockMvc mockMvc;

        @MockBean
        InventoryService service;

        @Test
        public void testGetInventoryBySkuCode() throws Exception {
            String skuCode = "skuCode1";
            Inventory i = Inventory.builder()
                    .skuCode("skuCode1")
                    .quantity(1)
                    .id(1L)
                    .build();
            Mockito.when(service.getProductBySkuCode(skuCode)).thenReturn(ResponseEntity.ok(i));
            mockMvc.perform(MockMvcRequestBuilders.get("http://localhost:8282/api/inventory/"+skuCode))
                    .andDo(print())
                    .andExpect(status().isOk())
                    .andExpect(MockMvcResultMatchers.jsonPath("$.id").value(1L))
                    .andExpect(MockMvcResultMatchers.jsonPath("$.skuCode").value("skuCode1"));
        }
        @Test
        public void testGetInventoryBySkuCode_notPresent() throws Exception {
            String skuCode = "skuCode1";
            Inventory i = Inventory.builder()
                    .skuCode("skuCode1")
                    .quantity(1)
                    .id(1L)
                    .build();
            Mockito.when(service.getProductBySkuCode(skuCode)).thenReturn(ResponseEntity.badRequest().build());
            mockMvc.perform(MockMvcRequestBuilders.get("http://localhost:8282/api/inventory/" +skuCode))
                    .andExpect(status().isBadRequest());
        }
        @Test
        public void testGetInventoryListBySkuCode() throws Exception {
            List<String> skuCode = Arrays.asList(new String[]{"skuCode1","skuCode2"});
            Inventory i = Inventory.builder()
                    .skuCode("skuCode1")
                    .quantity(1)
                    .id(1L)
                    .build();
            Inventory i1 = Inventory.builder()
                    .skuCode("skuCode2")
                    .quantity(1)
                    .id(1L)
                    .build();
            List<Inventory> li = new ArrayList<>();
            li.add(i);
            li.add(i1);
            Mockito.when(service.getProductBySkuCodes(skuCode)).thenReturn(ResponseEntity.ok(li));
            mockMvc.perform(MockMvcRequestBuilders.post("http://localhost:8282/api/inventory/getList")
                            .contentType(MediaType.APPLICATION_JSON).content("[\"skuCode1\",\"skuCode2\"]"))
                    .andExpect(status().isOk())
                    .andExpect(MockMvcResultMatchers.jsonPath("$[0].skuCode").value("skuCode1"))
                    .andExpect(MockMvcResultMatchers.jsonPath("$[1].skuCode").value("skuCode2"));;
        }
        @Test
        public void testUpdateProdQuantity() throws Exception {
            Long id = 1L;
            InventoryRequest iR = InventoryRequest.builder()
                    .skuCode("skuCode1")
                    .quantity(1)
                    .build();
            Inventory i = Inventory.builder()
                    .skuCode("skuCode1")
                    .quantity(2)
                    .id(id)
                    .build();
            Mockito.when(service.updateProdQuantity(1L,iR)).thenReturn(ResponseEntity.ok("Product quantity has been added successfully!!!"));
            mockMvc.perform(MockMvcRequestBuilders.put("http://localhost:8282/api/inventory/{id}",id)
                    .contentType(MediaType.APPLICATION_JSON)
                            .content(new ObjectMapper().writeValueAsString(iR)))
                    .andExpect(status().isOk())
                    .andExpect(MockMvcResultMatchers.content().string("Product quantity has been added successfully!!!"));
        }

        @Test
        public void testGetAllInventory() throws Exception{
            Inventory i = Inventory.builder()
                    .skuCode("skuCode1")
                    .quantity(1)
                    .id(1L)
                    .build();
            Inventory i1 = Inventory.builder()
                    .skuCode("skuCode2")
                    .quantity(1)
                    .id(1L)
                    .build();
            List<Inventory> li = new ArrayList<>();
            li.add(i);
            li.add(i1);
            Mockito.when(service.getAllInventory()).thenReturn(ResponseEntity.ok(li));
            mockMvc.perform(MockMvcRequestBuilders.get("http://localhost:8282/api/inventory")
                    .contentType(MediaType.APPLICATION_JSON))
                    .andExpect(status().isOk())
                    .andExpect(MockMvcResultMatchers.jsonPath("$[0].id").value(1L))
                    .andExpect(MockMvcResultMatchers.jsonPath("$[0].skuCode").value("skuCode1"))
                    .andExpect(MockMvcResultMatchers.jsonPath("$[0].quantity").value(1));
        }
    }


