pipeline {
    agent any
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Build & test All') {
            steps {
                parallel(
                    'Build & test product-service': {
                        dir('product-service') {
                            sh "mvn clean package"
                            sh "mvn test"
                        }
                    },
                    'Build & test order-service': {
                        dir('order-service') {
                            sh "mvn clean package"
                            sh "mvn test"
                        }
                    },
                    'Build & test inventory-service': {
                        dir('inventory-service') {
                            sh "mvn clean package"
                            sh "mvn test"
                        }
                    },
                    'Build & test notification-service': {
                        dir('notification-service') {
                            sh "mvn clean package"
                            sh "mvn test"
                        }
                    },
                    'Build & test api-gateway': {
                        dir('api-gateway') {
                            sh "mvn clean package"
                            sh "mvn test"
                        }
                    },
                    'Build & test discovery-server': {
                        dir('discovery-server') {
                            sh "mvn clean package"
                            sh "mvn test"
                        }
                    }
                )
            }
        }

        stage('Build & Push Docker Images') {
            parallel {
                stage('Product Service') {
                    steps {
                        dir('product-service') {
                            withCredentials([usernamePassword(credentialsId: 'ad312487-6758-4462-82e1-7a4b948ecd7e', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                                sh "docker build -t registry.hub.docker.com/vinaym404/product-service:latest ."
                                sh "docker login -u $USERNAME -p $PASSWORD registry.hub.docker.com/vinaym404"
                                sh "docker push registry.hub.docker.com/vinaym404/product-service:latest"
                            }
                        }
                    }
                }
                stage('Order Service') {
                    steps {
                        dir('order-service') {
                            withCredentials([usernamePassword(credentialsId: 'ad312487-6758-4462-82e1-7a4b948ecd7e', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                                sh "docker build -t registry.hub.docker.com/vinaym404/order-service:latest ."
                                sh "docker login -u $USERNAME -p $PASSWORD registry.hub.docker.com/vinaym404"
                                sh "docker push registry.hub.docker.com/vinaym404/order-service:latest"
                            }
                        }
                    }
                }
                stage('Inventory Service') {
                    steps {
                        dir('inventory-service') {
                            withCredentials([usernamePassword(credentialsId: 'ad312487-6758-4462-82e1-7a4b948ecd7e', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                                sh "docker build -t registry.hub.docker.com/vinaym404/inventory-service:latest ."
                                sh "docker login -u $USERNAME -p $PASSWORD registry.hub.docker.com/vinaym404"
                                sh "docker push registry.hub.docker.com/vinaym404/inventory-service:latest"
                            }
                        }
                    }
                }
                stage('Notification Service') {
                    steps {
                        dir('notification-service') {
                            withCredentials([usernamePassword(credentialsId: 'ad312487-6758-4462-82e1-7a4b948ecd7e', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                                sh "docker build -t registry.hub.docker.com/vinaym404/notification-service:latest ."
                                sh "docker login -u $USERNAME -p $PASSWORD registry.hub.docker.com/vinaym404"
                                sh "docker push registry.hub.docker.com/vinaym404/notification-service:latest"
                            }
                        }
                    }
                }
                stage('API Gateway') {
                    steps {
                        dir('api-gateway') {
                            withCredentials([usernamePassword(credentialsId: 'ad312487-6758-4462-82e1-7a4b948ecd7e', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                                sh "docker build -t registry.hub.docker.com/vinaym404/api-gateway:latest ."
                                sh "docker login -u $USERNAME -p $PASSWORD registry.hub.docker.com/vinaym404"
                                sh "docker push registry.hub.docker.com/vinaym404/api-gateway:latest"
                            }
                        }
                    }
                }
                stage('Discovery Server') {
                    steps {
                        dir('discovery-server') {
                            withCredentials([usernamePassword(credentialsId: 'ad312487-6758-4462-82e1-7a4b948ecd7e', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                                sh "docker build -t registry.hub.docker.com/vinaym404/discovery-server:latest ."
                                sh "docker login -u $USERNAME -p $PASSWORD registry.hub.docker.com/vinaym404"
                                sh "docker push registry.hub.docker.com/vinaym404/discovery-server:latest"
                            }
                        }
                    }
                }
            }
        }

        stage('Sonar Analysis') {
            steps {
                script {
                    def sonarToken = 'sqa_29e048a3d4230a17fb52c7c7d0f209dbbc7b5cee'
                    def projectKey = 'ecommerce_springboot_microservices'
                    def projectName = 'ecommerce_springboot_microservices'
                    def sonarHostUrl = 'http://34.126.116.107:9000/'
                    sh "mvn clean verify sonar:sonar -D sonar.projectKey=${projectKey} -D sonar.projectName='${projectName}' -D sonar.host.url=${sonarHostUrl} -D sonar.login=${sonarToken}"
                }
            }
        }
    }
}
